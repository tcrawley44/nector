{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER, GET_USER_ID } from './types';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode'; // Register user\n\nexport var registerUser = function registerUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/auth/register', userData).then(function (res) {\n      return console.log(\"registering\");\n    }).catch(function (err) {\n      return console.log(\"error\");\n    });\n  };\n};\nexport var newLoginUser = function newLoginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/auth/login', userData).then(function (res) {\n      dispatch({\n        type: GET_USER_ID,\n        payload: res.data\n      });\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      //save to local storage\n      var token = res.data.token; //set token to local storage\n\n      localStorage.setItem('jwtToken', token); //set token to auth header\n\n      setAuthToken(token); //decode token to get user data\n\n      var decoded = jwt_decode(token); //set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["C:\\Users\\tsc\\Desktop\\projects\\mern-nector-new\\client\\src\\actions\\authActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","GET_USER_ID","axios","setAuthToken","jwt_decode","registerUser","userData","dispatch","post","then","res","console","log","catch","err","newLoginUser","type","payload","data","response","loginUser","token","localStorage","setItem","decoded","setCurrentUser"],"mappings":"AAAA,SAASA,UAAT,EAAoBC,gBAApB,EAAsCC,WAAtC,QAAwD,SAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD;AAAA,SAAc,UAAAC,QAAQ,EAAI;AAClDL,IAAAA,KAAK,CACAM,IADL,CACU,oBADV,EACgCF,QADhC,EAEKG,IAFL,CAEU,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAY,aAAZ,CAAJ;AAAA,KAFb,EAGKC,KAHL,CAGW,UAAAC,GAAG;AAAA,aACNH,OAAO,CAACC,GAAR,CAAY,OAAZ,CADM;AAAA,KAHd;AAMH,GAP2B;AAAA,CAArB;AASP,OAAO,IAAMG,YAAY,GAAG,SAAfA,YAAe,CAAAT,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAChDL,IAAAA,KAAK,CAACM,IAAN,CAAW,iBAAX,EAA8BF,QAA9B,EACKG,IADL,CACU,UAAAC,GAAG,EAAI;AACTH,MAAAA,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEf,WADD;AAELgB,QAAAA,OAAO,EAAEP,GAAG,CAACQ;AAFR,OAAD,CAAR;AAKH,KAPL,EAQKL,KARL,CAQW,UAAAC,GAAG;AAAA,aACNP,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEjB,UADD;AAELkB,QAAAA,OAAO,EAAEH,GAAG,CAACK,QAAJ,CAAaD;AAFjB,OAAD,CADF;AAAA,KARd;AAcH,GAfmC;AAAA,CAA7B,C,CAiBP;;AACA,OAAO,IAAME,SAAS,GAAG,SAAZA,SAAY,CAAAd,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC7CL,IAAAA,KAAK,CAACM,IAAN,CAAW,kBAAX,EAA+BF,QAA/B,EACKG,IADL,CACU,UAAAC,GAAG,EAAI;AACT;AADS,UAGFW,KAHE,GAGOX,GAAG,CAACQ,IAHX,CAGFG,KAHE,EAIT;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALS,CAMT;;AACAlB,MAAAA,YAAY,CAACkB,KAAD,CAAZ,CAPS,CAQT;;AACA,UAAMG,OAAO,GAAGpB,UAAU,CAACiB,KAAD,CAA1B,CATS,CAUT;;AACAd,MAAAA,QAAQ,CAACkB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,KAbL,EAcKX,KAdL,CAcW,UAAAC,GAAG;AAAA,aACNP,QAAQ,CAAC;AACLS,QAAAA,IAAI,EAAEjB,UADD;AAELkB,QAAAA,OAAO,EAAEH,GAAG,CAACK,QAAJ,CAAaD;AAFjB,OAAD,CADF;AAAA,KAdd;AAoBH,GArBgC;AAAA,CAA1B,C,CAuBP;;AACA,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACD,OAAD,EAAa;AACvC,SAAO;AACHR,IAAAA,IAAI,EAAEhB,gBADH;AAEHiB,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM","sourcesContent":["import { GET_ERRORS,SET_CURRENT_USER, GET_USER_ID} from './types';\r\nimport axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n// Register user\r\nexport const registerUser = (userData) => dispatch => {\r\n    axios\r\n        .post('/api/auth/register', userData)\r\n        .then(res => console.log(\"registering\"))\r\n        .catch(err => \r\n            console.log(\"error\")\r\n        );\r\n};\r\n\r\nexport const newLoginUser = userData => dispatch => {\r\n    axios.post('/api/auth/login', userData)\r\n        .then(res => {\r\n            dispatch({\r\n                type: GET_USER_ID,\r\n                payload: res.data\r\n            })\r\n            \r\n        })\r\n        .catch(err => \r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        )\r\n}\r\n\r\n//login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n    axios.post('/api/users/login', userData)\r\n        .then(res => {\r\n            //save to local storage\r\n            \r\n            const {token} = res.data;\r\n            //set token to local storage\r\n            localStorage.setItem('jwtToken', token);\r\n            //set token to auth header\r\n            setAuthToken(token);\r\n            //decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            //set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err => \r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        )\r\n};\r\n\r\n//set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}