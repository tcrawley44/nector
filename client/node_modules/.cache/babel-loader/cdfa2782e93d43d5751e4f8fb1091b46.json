{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\tsc\\\\Desktop\\\\projects\\\\mern-nector-new\\\\client\\\\src\\\\components\\\\add-person\\\\Interests.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport \"./AddPersonStyles.css\";\nimport TextFieldGroup from \"../common/TextFieldGroup\";\nimport { addNode, getNodes } from \"../../actions/nodeActions\";\nimport { getTree, test } from \"../../actions/treeactions\";\nimport { addInterest, getInterests } from \"../../actions/profileActions\";\n\nvar Interests =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Interests, _Component);\n\n  function Interests(props) {\n    var _this;\n\n    _classCallCheck(this, Interests);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Interests).call(this, props));\n\n    _this.getDataFromChild = function (dataFromChild) {\n      //console.log(dataFromChild);\n      var passUp = [_this.props.tree2.name, dataFromChild];\n\n      _this.props.sendDataToParent(passUp);\n\n      _this.refs.foob.style = 'background-color: red';\n    };\n\n    _this.state = {\n      name: \"\",\n      parentName: \"\",\n      interests: []\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this))); //this.props.test();\n\n    return _this;\n  }\n\n  _createClass(Interests, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(e) {\n      e.preventDefault();\n      var data = {\n        name: this.state.name //console.log(data.name, this.state.parentName );\n\n      };\n      this.props.addNode(data.name, this.state.parentName);\n      this.setState({\n        state: this.state\n      });\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(e) {\n      this.setState(_defineProperty({}, e.target.name, e.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var displayChildren = this.state.displayChildren;\n      var children;\n      var listItems;\n\n      if (!(this.props.tree2 === \"\" || undefined)) {\n        //console.log(this.props.tree2.children);\n        listItems = this.props.tree2.children.map(function (node) {\n          return React.createElement(\"div\", {\n            key: node.name,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76\n            },\n            __self: this\n          }, React.createElement(InterestPort, {\n            sendDataToParent: _this2.getDataFromChild,\n            key: node.name,\n            tree2: node,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77\n            },\n            __self: this\n          }));\n        }); //console.log(listItems);\n      }\n\n      if (displayChildren) {\n        children = React.createElement(\"div\", {\n          className: \"nodeContainer\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, listItems, React.createElement(\"form\", {\n          className: \"newChild\",\n          onSubmit: this.onSubmit,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row derp\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          className: \"form-control squish form-control-lg\",\n          placeholder: \"name\",\n          name: \"name\",\n          value: this.state.name,\n          onChange: this.onChange,\n          autoComplete: \"off\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          type: \"submit\",\n          value: \"+\",\n          className: \"btn btn-info butt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }))));\n      } else {\n        children = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        });\n      }\n\n      var buttonName = \"test\";\n\n      if (!(this.props.tree2 === \"\")) {\n        //console.log(this.props.tree2.name);\n        buttonName = this.props.tree2.name;\n        this.state.parentName = buttonName;\n      } //console.log(\"hello\")\n\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"d-flex nodeContainer flex-row ml-2 bd-highlight mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        id: \"foo\",\n        ref: \"foob\",\n        className: \"btn btn-info ml-2\",\n        onClick: function onClick() {\n          _this2.setState(function (prevState) {\n            return {\n              displayChildren: !prevState.displayChildren\n            };\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, buttonName), React.createElement(\"button\", {\n        className: \"btn .text-secondary btn-info butt2\",\n        onClick: function onClick() {\n          _this2.refs.foob.style = 'background-color: red';\n\n          _this2.props.addInterest(buttonName);\n\n          _this2.props.sendDataToParent([buttonName]);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, \">\")), React.createElement(\"div\", {\n        className: \"col nodeStack\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, children));\n    }\n  }]);\n\n  return Interests;\n}(Component);\n\nInterests.propTypes = {\n  //getNodes: PropTypes.func.isRequired,\n  //node: PropTypes.object.isRequired\n  //getTree: PropTypes.func.isRequired,\n  //tree: PropTypes.object.isRequired,\n  //test: PropTypes.func.isRequired \n  //addNode: PropTypes.func\n  //errors: PropTypes.object.isRequired\n  interests: PropTypes.object\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    //node: state.node\n    //tree: state.tree\n    //errors: state.errors\n    interests: state.interests\n  };\n};\n\nvar InterestPort = connect(mapStateToProps, {\n  addNode: addNode,\n  getNodes: getNodes,\n  getTree: getTree,\n  test: test,\n  addInterest: addInterest,\n  getInterests: getInterests\n})(withRouter(Interests));\nexport default InterestPort;","map":{"version":3,"sources":["C:\\Users\\tsc\\Desktop\\projects\\mern-nector-new\\client\\src\\components\\add-person\\Interests.js"],"names":["React","Component","connect","withRouter","PropTypes","TextFieldGroup","addNode","getNodes","getTree","test","addInterest","getInterests","Interests","props","getDataFromChild","dataFromChild","passUp","tree2","name","sendDataToParent","refs","foob","style","state","parentName","interests","onChange","bind","onSubmit","e","preventDefault","data","setState","target","value","displayChildren","children","listItems","undefined","map","node","buttonName","prevState","propTypes","object","mapStateToProps","InterestPort"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {connect} from 'react-redux';\r\nimport {withRouter} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\nimport \"./AddPersonStyles.css\";\r\nimport TextFieldGroup from \"../common/TextFieldGroup\";\r\nimport {addNode,getNodes} from \"../../actions/nodeActions\";\r\nimport {getTree,test} from \"../../actions/treeactions\";\r\nimport {addInterest, getInterests} from \"../../actions/profileActions\";\r\n\r\n\r\nclass Interests extends Component {\r\n\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n           \r\n           name: \"\",\r\n           parentName: \"\",\r\n           interests: []\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        //this.props.test();\r\n        \r\n    }\r\n        \r\n    componentDidMount(){\r\n        \r\n    }\r\n       \r\n    onSubmit(e){\r\n        e.preventDefault();\r\n\r\n        const data = {\r\n            name: this.state.name   \r\n        }\r\n        \r\n            \r\n        //console.log(data.name, this.state.parentName );\r\n        \r\n        this.props.addNode(data.name, this.state.parentName);\r\n        this.setState({ state: this.state });\r\n    }\r\n\r\n    \r\n\r\n    onChange(e) {\r\n        \r\n            this.setState({[e.target.name]: e.target.value});\r\n        \r\n    }\r\n\r\n    \r\n    getDataFromChild = (dataFromChild) => {\r\n        //console.log(dataFromChild);\r\n        let passUp = [this.props.tree2.name, dataFromChild]\r\n        this.props.sendDataToParent(passUp);\r\n        this.refs.foob.style = 'background-color: red';\r\n        \r\n        \r\n        \r\n    }\r\n   \r\n\r\n    render() {\r\n        const { displayChildren} = this.state; \r\n        \r\n        let children; \r\n        let listItems;\r\n        \r\n        if(!(this.props.tree2 === \"\" || undefined)){\r\n            //console.log(this.props.tree2.children);\r\n            listItems = this.props.tree2.children.map((node) =>\r\n                <div key = {node.name}>\r\n                    <InterestPort sendDataToParent = {this.getDataFromChild} key = {node.name} tree2 = {node} />\r\n                </div>\r\n            );\r\n            //console.log(listItems);\r\n        }\r\n        if(displayChildren){\r\n            children = (\r\n                <div className = \"nodeContainer\">\r\n                {listItems}\r\n                \r\n                <form  className =\"newChild\" onSubmit = {this.onSubmit}>\r\n                        <div className = \"row derp\"> \r\n                            <input\r\n                    \r\n                                className = \"form-control squish form-control-lg\" \r\n                                placeholder=\"name\"\r\n                                name=\"name\"\r\n                                value = {this.state.name}\r\n                                onChange = {this.onChange}\r\n                                autoComplete = \"off\"\r\n                            />             \r\n                                      \r\n                                \r\n                               \r\n                            <input type = \"submit\" value= \"+\" className = \"btn btn-info butt\"/>\r\n                        </div>\r\n                    </form> \r\n                </div>\r\n            )\r\n        }else{\r\n            children = (\r\n                \r\n                    <div></div>     \r\n                    \r\n                 \r\n            )\r\n        }\r\n        let buttonName = \"test\";\r\n         if(!(this.props.tree2 === \"\")){\r\n            //console.log(this.props.tree2.name);\r\n            buttonName = this.props.tree2.name;\r\n            this.state.parentName = buttonName; \r\n        }   \r\n        //console.log(\"hello\")\r\n        return (\r\n            <div>\r\n                <div className = \"d-flex nodeContainer flex-row ml-2 bd-highlight mb-2\">\r\n                                    \r\n                    <button type = \"button\" id = \"foo\" ref = \"foob\" className = \"btn btn-info ml-2\" onClick ={() => {\r\n                            this.setState(prevState => ({\r\n                                displayChildren: !prevState.displayChildren\r\n                            }))\r\n                        }}>\r\n                        {buttonName}\r\n                        \r\n                    </button> \r\n                    <button className = \"btn .text-secondary btn-info butt2\" onClick ={() => {\r\n                            this.refs.foob.style = 'background-color: red';\r\n                            this.props.addInterest(buttonName);\r\n                            this.props.sendDataToParent([buttonName]);\r\n                        }}>\r\n                        >\r\n                    </button>\r\n                </div>\r\n                <div className = \"col nodeStack\">\r\n                    {children}\r\n                    \r\n                </div>\r\n\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nInterests.propTypes = {\r\n    //getNodes: PropTypes.func.isRequired,\r\n    //node: PropTypes.object.isRequired\r\n    //getTree: PropTypes.func.isRequired,\r\n    //tree: PropTypes.object.isRequired,\r\n    //test: PropTypes.func.isRequired \r\n    //addNode: PropTypes.func\r\n    //errors: PropTypes.object.isRequired\r\n    interests: PropTypes.object\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    //node: state.node\r\n    //tree: state.tree\r\n    //errors: state.errors\r\n    interests: state.interests\r\n})\r\n\r\nconst InterestPort = connect(mapStateToProps, {addNode, getNodes, getTree, test, addInterest, getInterests})(withRouter(Interests));\r\nexport default InterestPort;"]},"metadata":{},"sourceType":"module"}