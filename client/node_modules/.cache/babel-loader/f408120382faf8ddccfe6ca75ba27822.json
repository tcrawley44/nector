{"ast":null,"code":"import { GET_ERRORS, SET_CURRENT_USER } from './types';\nimport axios from 'axios';\nimport setAuthToken from '../utils/setAuthToken';\nimport jwt_decode from 'jwt-decode'; // Register user\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function (res) {\n      return history.push('/login');\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //login - get user token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      //save to local storage\n      var token = res.data.token; //set token to local storage\n\n      localStorage.setItem('jwtToken', token); //set token to auth header\n\n      setAuthToken(token); //decode token to get user data\n\n      var decoded = jwt_decode(token); //set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};","map":{"version":3,"sources":["C:\\Users\\tsc\\Desktop\\projects\\mern-nector\\client\\src\\actions\\authActions.js"],"names":["GET_ERRORS","SET_CURRENT_USER","axios","setAuthToken","jwt_decode","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser"],"mappings":"AAAA,SAASA,UAAT,EAAoBC,gBAApB,QAA2C,SAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CACA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC3DN,IAAAA,KAAK,CACAO,IADL,CACU,qBADV,EACiCH,QADjC,EAEKI,IAFL,CAEU,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFb,EAGKC,KAHL,CAGW,UAAAC,GAAG;AAAA,aACNN,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEf,UADD;AAELgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADF;AAAA,KAHd;AASH,GAV2B;AAAA,CAArB,C,CAcP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAb,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC7CN,IAAAA,KAAK,CAACO,IAAN,CAAW,kBAAX,EAA+BH,QAA/B,EACKI,IADL,CACU,UAAAC,GAAG,EAAI;AACT;AADS,UAGFS,KAHE,GAGOT,GAAG,CAACO,IAHX,CAGFE,KAHE,EAIT;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EALS,CAMT;;AACAjB,MAAAA,YAAY,CAACiB,KAAD,CAAZ,CAPS,CAQT;;AACA,UAAMG,OAAO,GAAGnB,UAAU,CAACgB,KAAD,CAA1B,CATS,CAUT;;AACAZ,MAAAA,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR;AACH,KAbL,EAcKV,KAdL,CAcW,UAAAC,GAAG;AAAA,aACNN,QAAQ,CAAC;AACLO,QAAAA,IAAI,EAAEf,UADD;AAELgB,QAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFjB,OAAD,CADF;AAAA,KAdd;AAoBH,GArBgC;AAAA,CAA1B,C,CAuBP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACD,OAAD,EAAa;AACvC,SAAO;AACHR,IAAAA,IAAI,EAAEd,gBADH;AAEHe,IAAAA,OAAO,EAAEO;AAFN,GAAP;AAIH,CALM","sourcesContent":["import { GET_ERRORS,SET_CURRENT_USER} from './types';\r\nimport axios from 'axios';\r\nimport setAuthToken from '../utils/setAuthToken';\r\nimport jwt_decode from 'jwt-decode';\r\n// Register user\r\nexport const registerUser = (userData, history) => dispatch => {\r\n    axios\r\n        .post('/api/users/register', userData)\r\n        .then(res => history.push('/login'))\r\n        .catch(err => \r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        );\r\n};\r\n\r\n\r\n\r\n//login - get user token\r\nexport const loginUser = userData => dispatch => {\r\n    axios.post('/api/users/login', userData)\r\n        .then(res => {\r\n            //save to local storage\r\n            \r\n            const {token} = res.data;\r\n            //set token to local storage\r\n            localStorage.setItem('jwtToken', token);\r\n            //set token to auth header\r\n            setAuthToken(token);\r\n            //decode token to get user data\r\n            const decoded = jwt_decode(token);\r\n            //set current user\r\n            dispatch(setCurrentUser(decoded));\r\n        })\r\n        .catch(err => \r\n            dispatch({\r\n                type: GET_ERRORS,\r\n                payload: err.response.data\r\n            })\r\n        )\r\n};\r\n\r\n//set logged in user\r\nexport const setCurrentUser = (decoded) => {\r\n    return {\r\n        type: SET_CURRENT_USER,\r\n        payload: decoded\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}